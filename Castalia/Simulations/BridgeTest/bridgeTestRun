#!/usr/bin/perl	

use Getopt::Long;

use constant WC_IDEAL => "../Parameter_Include_Files/WChannel/Simple_Interference_Model/WChannel_Ideal.ini";
use constant WC_REAL => "../Parameter_Include_Files/WChannel/Additive_Interference_Model/WChannel_Realistic.ini";
use constant R_IDEAL => "../Parameter_Include_Files/Radio/TelosB_CC2420/radio_CC2420_IDEALmodulation.ini";
use constant R_REAL => "../Parameter_Include_Files/Radio/TelosB_CC2420/radio_CC2420.ini";
use constant Z_CONFIDENCE => 1.96;

my $stat = {};
my $conf = {
    "40x10" => { x => 40, y => 10 },
    "100x20" => { x => 100, y => 20 },
    "200x20" => { x => 200, y => 20 },
    "500x20" => { x => 500, y => 20 },
    "1000x20" => { x => 1000, y => 20 },
};

my $sim;
my $n;
my $ideal;
my $time;
my $broadcast;
my $print_result;
my $duty_cycle;
my $listen;
my $help;

GetOptions("n=i" => \$n, "sim=s" => \$sim, "ideal" => \$ideal, "time=i" => \$time, 
    "broadcast" => \$broadcast, "result" => \$print_result, "duty=f" => \$duty_cycle,
    "listen" => \$listen, "help" => \$help);
    
if ($help) {
    print "
bridgeTestRun has the following options:
    -n			number of simulations to preform (the results are averaged), default is 1
    -s, --sim 		simulation topology to use, avaliable values are ".join(",", keys %$conf).", default is 40x10
    -i, --ideal		use ideal wireless channel, default is realistic
    -t, --time		run each simulation for this duration (in seconds), default is 600
    -b, --broadcast	use simple broadcast to pass messages, default is multipath rings routing
    -r, --result	print out raw results from each simulation, only averaged results are printed by default
    -d, --duty		use a specific duty cycle (values from 0 to 1), default is 1
    -l, --listen 	specify the listening time manually, default is 100*duty cycle
    -h, --help		print this message

";
    exit(0);
}

$sim = $conf->{$sim} || $conf->{"40x10"};
$n = 1 unless $n > 1;
$time = 600 unless $time && $time > 0;
$duty_cycle = 1 unless $duty_cycle > 0 and $duty_cycle < 1;
$listen = 100 * $duty_cycle unless $listen > 0;

my $ini = "

[General]
preload-ned-files = *.ned @../../nedfiles.lst
include ../Parameter_Include_Files/general_and_RNGs.ini

output-vector-file = Castalia-statistics.vec
output-scalar-file = Castalia-statistics.sca

sim-time-limit = ".$time."s

[Cmdenv]
include ../Parameter_Include_Files/omnet_cmdenv_reporting.ini

[Parameters]

include ../Parameter_Include_Files/BackwardCompatibility.ini

SN.debugInfoFilename = \"Castalia-Debug.txt\"

include ../Parameter_Include_Files/resourceMgr_2AAbatteries.ini
include ../Parameter_Include_Files/nodeSensorDevMgr_Accelerometer.ini
include ".($ideal ? WC_IDEAL : WC_REAL)."
include ".($ideal ? R_IDEAL : R_REAL)."
include ./MAC_Tunable.ini
include ../Parameter_Include_Files/Routing_simpleTree.ini

SN.node[*].networkInterface.MAC.dutyCycle = $duty_cycle
SN.node[*].networkInterface.MAC.listenInterval = $listen

SN.node[*].appModuleName = \"BridgeTest_ApplicationModule\"
SN.node[*].nodeApplication.applicationID = \"bridgeTest\"
SN.node[*].nodeApplication.printDebugInfo = false
SN.node[*].nodeApplication.priority = 1

SN.node[*].nodeApplication.maxAppPacketSize = 70    #in bytes
SN.node[*].nodeApplication.packetHeaderOverhead = 8 #in bytes

SN.node[*].nodeApplication.reportTreshold = 10
SN.node[*].nodeApplication.reportInterval = 1000
SN.node[*].nodeApplication.broadcastReports = ".($broadcast ? "true" : "false")."

SN.numPhysicalProcesses = 1
SN.physicalProcessModuleName = \"CarsPhysicalProcess\"
SN.physicalProcess[0].printDebugInfo = false
SN.physicalProcess[0].description = \"Cars\"
SN.physicalProcess[0].max_num_cars = 5
SN.physicalProcess[0].car_speed = 16
SN.physicalProcess[0].car_value = 30
SN.physicalProcess[0].car_interarrival = 60

SN.physicalProcess[0].point1_x_coord = 0
SN.physicalProcess[0].point1_y_coord = ".($sim->{y}/2)."
SN.physicalProcess[0].point2_x_coord = ".$sim->{x}."
SN.physicalProcess[0].point2_y_coord = ".($sim->{y}/2)."

SN.field_x = $sim->{x}
SN.field_y = $sim->{y}
";

$num = 1; $tmp = "";

for (my $x = 0; $x <= $sim->{x}; $x+=20) {
    for (my $y = 0; $y <= $sim->{y}; $y+=10) {
	$tmp .= "
SN.node[$num].xCoor = $x
SN.node[$num].yCoor = $y
SN.node[$num].nodeApplication.isSink = false
";
	$num++;
    }
}

$ini .= "
SN.numNodes = $num
SN.deploymentType = 3

SN.node[0].xCoor = ".($sim->{x}/2)."
SN.node[0].yCoor = ".($sim->{y}/2)."
SN.node[0].nodeApplication.isSink = true
$tmp
";

for (my $i = 1; $i <= $n; $i++) {
    $ini .= "
[Run $i]
seed-1-mt = ".int(rand(99999))."
seed-2-mt = ".int(rand(99999))."
"
}

open INI, ">omnetpp.ini" || die "Unable to write omnetpp.ini";
print INI $ini;
close INI;

my $result = `../../bin/CastaliaBin`;
my @lines = split /\n/, $result;
my $run = 0;

#print $result;
my $sink_res;
my $node_res;
my $simlen;
my $total_version_packets = 0;
my $curr_run = 0;

for my $line (@lines) {
    if ($line =~ /Calling finish\(\) at end of Run \#(\d+)/) {
	$curr_run = $1;
    } elsif ($line =~ /Sink is at version: (\d+) packet: (\d+) total: (\d+)/) {
	$total_version_packets = ($1-1)*$3+$2;
    } elsif ($line =~ /Sink received from:/) { 
	$sink_res = 1; $node_res = 0;
    } elsif ($line =~ /Node (\d+) received version information:/) {
	$node_res = $1; $sink_res = 0;
    } elsif ($line =~ /^(\d+)\s(\d+)$/) {
	if ($sink_res) {
	    add_stat("Node $1 reports received", "$curr_run:$1", $2, 0);
	    add_stat("Overall reception", "$curr_run:$1", $2, 0);
	} elsif ($node_res) {
	    add_stat("Version reception", "$curr_run:$node_res", $2, 0);
	    add_stat("Version reception", "$curr_run:$node_res", $total_version_packets, 1);
	}
    } elsif ($line =~ /^Node (\d+) sent (\d+) packets/) {
	add_stat("Node $1 reports received", "$curr_run:$1", $2, 1);
	add_stat("Overall reception", "$curr_run:$1", $2, 1);
    } elsif ($line =~ /^Node \d+ ran out of energy at (\d+)/) {
	$simlen = $1 if !$simlen || $simlen > $1;
    }
}

if ($print_result) { print $result; }
if (%$stat) { print_stat(); } elsif (!$print_result) { print $result; }

sub add_stat {
    my $desc = shift;
    my $k = shift;
    my $v = shift;
    my $total = shift;
    my $s = $stat->{$desc};
    if (!$s) {
        $s = $stat->{$desc} = { total => {}, good => {}, total_sum => 0, good_sum => 0 };
    }
    if ($total) {
	$s->{total}->{$k} = $v;
	$s->{total_sum} += $v;
    } else {
	$s->{good}->{$k} = $v;
	$s->{good_sum} += $v;
    }
}

sub print_stat {
    if ($simlen) {
	my $days = $simlen/86400;
	my $h = int($simlen/3600);
	$simlen -= $h*3600;
	my $m = int($simlen/60);
	$simlen -= $m*60;
	printf "First node ran out of energy at %.2d:%.2d:%.2d, (%.2f days)\n",$h,$m,$simlen,$days;
    }
    for my $k (sort keys %$stat) {
	my $s = $stat->{$k};
	my $c = 0;
	if ($s->{total_sum} != 0 && $s->{good_sum} != 0) {
	    my $p = [];
	    for (keys %{$s->{total}}) {
		next unless $s->{total}->{$_};
		push @$p, ($s->{good}->{$_} || 0)*100/$s->{total}->{$_};
	    }
	    $c = confidence($p) if @$p > 1;
	}
	$c = $c ? sprintf("[%.2f%] ",$c) : "";
	printf "$k %.2f% $c$s->{good_sum}/$s->{total_sum}\n", $s->{total_sum} > 0 ? $s->{good_sum}*100/$s->{total_sum} : 0, $c;
    }
}

sub confidence {
    my $a = shift;
    return 0 unless @$a;
    my $mean = shift || mean($a);
    my $sqmean = 0;
    for (@$a) { $sqmean += ($mean-$_)*($mean-$_); }
    my $std = sqrt($sqmean/@$a)/sqrt(@$a);
    my $c = Z_CONFIDENCE*$std;
#    print "@$a\n ==> M:$mean S:$std C:$c\n";
    return $c;
}

sub mean {
    my $a = shift;
    return 0 unless @$a;
    my $sum = 0;
    for (@$a) { $sum+=$_; }
    return $sum/@$a;
}