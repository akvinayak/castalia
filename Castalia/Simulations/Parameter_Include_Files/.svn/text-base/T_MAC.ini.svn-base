# ***************************************************************************************
# *  Copyright: National ICT Australia,  2009						*
# *  Developed at the Networks and Pervasive Computing program				*
# *  Author(s): Athanassios Boulis, Dimosthenis Pediaditakis				*
# *  This file is distributed under the terms in the attached LICENSE file.		*
# *  If you do not find this file, copies can be found by writing to:			*
# *											*
# *      NICTA, Locked Bag 9013, Alexandria, NSW 1435, Australia			*
# *      Attention:  License Inquiry.							*
# *											*
# **************************************************************************************/



# -----------------------------------------------------------------
# -- SIMPLE SUB-MODULE of networkInterface: networkInterface.MAC --
# -----------------------------------------------------------------

# first define which module implementation you are using  
# (different MACs may have different parameters)
SN.node[*].networkInterface.macModuleName = "TMacModule"


SN.node[*].networkInterface.MAC.printDebugInfo = true
# if printDebugInfo is false then potentiallyDroppedPacketsStatistics and StateTransitions will not be written at the Castalia-Debug output
SN.node[*].networkInterface.MAC.printPotentiallyDroppedPacketsStatistics = true	#if true, it prints an overall analysis of the dropped packets at MAC upon Rx
SN.node[*].networkInterface.MAC.printStateTransitions = true		#if true, it prints the transitions of the MAC between it states (Default, Tx, Carrier Sensing, Expecting Rx)


# ------ These are the parameters you usually tune  -----------------------------
#SN.node[*].networkInterface.MAC.dutyCycle = 0.1 		# listening / (sleeping+listening)
#SN.node[*].networkInterface.MAC.listenInterval = 10		# ms, cannot be smaller than 0.5ms
#SN.node[*].networkInterface.MAC.beaconIntervalFraction = 0.9  	# beacon_interval / sleeping_interval, if 0 no beacons are sent
#SN.node[*].networkInterface.MAC.probTx = 1			# the probability of a single try of Transmission to happen
#SN.node[*].networkInterface.MAC.numTx = 1			# when we have something to Tx, how many times we try
#SN.node[*].networkInterface.MAC.randomTxOffset = 10		# ms, Tx after time chosen randomly from interval [0..randomTxOffset]
#SN.node[*].networkInterface.MAC.reTxInterval = 40		# ms, Interval between retransmissions, (numTx-1) retransmissions
#SN.node[*].networkInterface.MAC.backoffType =  1 		# 0-->(backoff = sleepinterval), 1-->(backoff = constant value), 2-->(backoff = multiplying value - e.g. 1*a, 2*a, 3*a, 4*a ...), 3-->(backoff = exponential value - e.g. 2, 4, 8, 16, 32...)
#SN.node[*].networkInterface.MAC.backoffBaseValue = 20  		#in ms
#SN.node[*].networkInterface.MAC.randomBackoff = true
# ------ These are the parameters you cusually tune -- END ---------------------------



# MAC_GenericFrame has the following real-world 
# (non-simulation-specific) fields:
#	struct macHeaderInfo header; ----------> 14bytes
#	struct estim consists of:
#		int frameType enum(MAC_ProtocolFrameType); ---> 2bytes
#		int srcID;  --------------> 4bytes
#		int destID; --------------> 4bytes
#		int dataSequenceNumber; --> 4bytes
# MAC header overhead: Total bytes = 4*3 + 2 = 14 (|*|)
SN.node[*].networkInterface.MAC.maxMACFrameSize = 80	# bytes
SN.node[*].networkInterface.MAC.macFrameOverhead = 14	# bytes
#SN.node[*].networkInterface.MAC.beaconFrameSize = 14	# bytes
SN.node[*].networkInterface.MAC.ackFrameSize = 14	# bytes
SN.node[*].networkInterface.MAC.syncFrameSize = 14	# bytes
SN.node[*].networkInterface.MAC.rtsFrameSize = 14	# bytes
SN.node[*].networkInterface.MAC.ctsFrameSize = 14	# bytes

SN.node[*].networkInterface.MAC.macBufferSize = 32	# number of maximum frames held from the upper layer 

#SN.node[*].networkInterface.MAC.backoffType = 2
#SN.node[*].networkInterface.MAC.backoffBaseValue = 10
SN.node[*].networkInterface.MAC.resyncTimer = 6100
SN.node[*].networkInterface.MAC.contentionPeriod = 10
SN.node[*].networkInterface.MAC.listenTimeout = 15
SN.node[*].networkInterface.MAC.FRTS = 0
SN.node[*].networkInterface.MAC.frameTime = 610

# u Normally you want the MAC to perform carrier sense before trying transmitting
#SN.node[*].networkInterface.MAC.carrierSense = true
