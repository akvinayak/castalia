# ***************************************************************************************
# *  Copyright: National ICT Australia,  2007, 2008					*
# *  Developed at the Networks and Pervasive Computing program				*
# *  Author(s): Athanassios Boulis, Dimosthenis Pediaditakis				*
# *  This file is distributed under the terms in the attached LICENSE file.		*
# *  If you do not find this file, copies can be found by writing to:			*
# *											*
# *      NICTA, Locked Bag 9013, Alexandria, NSW 1435, Australia			*
# *      Attention:  License Inquiry.							*
# *											*
# **************************************************************************************/


[General]
# The list of ned files to be dynamically loaded, 
# make sure it points to $(CASTALIA_HOME)/nedfiles.lst 
preload-ned-files = *.ned @../../nedfiles.lst

#always include the general and RNGs parameter file
include ../Parameter_Include_Files/general_and_RNGs.ini

# how long do you want your simulation to run?
sim-time-limit = 100s

output-vector-file = Castalia-statistics.vec
output-scalar-file = Castalia-statistics.sca


[Cmdenv]
# always include the omnet_cmdenv_reporting parameter file
include ../Parameter_Include_Files/omnet_cmdenv_reporting.ini


[Parameters]
# The filename that (potential) debug output will be written to
SN.debugInfoFilename = "Castalia-Debug.txt"


# COMPOUND MODULE: SN (the network)

include ../Parameter_Include_Files/BackwardCompatibility.ini

# define deployment details
SN.field_x = 40					# meters
SN.field_y = 40					# meters
SN.numNodes = 9

SN.deploymentType = 1				# 0 means a uniform random deployment inside the network's X,Y boundaries
						# 1 means a grid deployment
						# 2 means randomized grid deployment (i.e. grid+ noise)
						# any other number means that the user must specify manually the locations of each one of the nodes
SN.xGridSize = 3
SN.yGridSize = 3
SN.zGridSize = -1

# or you could opt for a manual deployment like so:
#SN.field_x = 40					# meters
#SN.field_y = 50					# meters
#SN.numNodes = 9
#SN.deploymentType = 4	
#include node_locations.ini

# how many physical processes do you have?
SN.numPhysicalProcesses = 1

# Choose a parameters file for module SN.physicalProcess[0] or define your own
include ../Parameter_Include_Files/physicalProcess_0_node6_asssignedValue40.ini

# Choose a parameters file for module SN.node[*].resourceMgr or define your own
include ../Parameter_Include_Files/resourceMgr_2AAbatteries.ini

# Choose a parameters file for module SN.node[*].nodeSensorDevMgr or define your own
include ../Parameter_Include_Files/nodeSensorDevMgr_Temperature.ini

# Choose a parameters file for module SN.wirelessChannel or define your own
#include ../Parameter_Include_Files/WChannel/No_Interference/WChannel_Ideal.ini
include ../Parameter_Include_Files/WChannel/Additive_Interference_Model/WChannel_Realistic.ini

# Choose a parameters file for module SN.node[*].networkInterface.Radio or define your own
#include ../Parameter_Include_Files/Radio/TelosB_CC2420/radio_CC2420_IDEALmodulation.ini
include ../Parameter_Include_Files/Radio/TelosB_CC2420/radio_CC2420.ini

# Choose a parameters file for module SN.node[*].networkInterface.MAC or define your own
include ../Parameter_Include_Files/MAC_Bypass.ini

# Choose a parameters file for module SN.node[*].networkInterface.MAC or define your own
include ../Parameter_Include_Files/Routing_bypass.ini

# ----------------------------------------------------------------
# Define the application module you want to use and its parameters
# ----------------------------------------------------------------
SN.node[*].appModuleName = "connectivityMap_ApplicationModule"
SN.node[*].nodeApplication.applicationID = "connMap"
SN.node[*].nodeApplication.printDebugInfo = true
SN.node[*].nodeApplication.printConnectivityMap = true		#prints the connectivity map to the standard output
SN.node[*].nodeApplication.priority = 1

# App_GenericDataPacket has the following real-world 
# (non-simulation-specific) fields:
#	string source; ----------> 2bytes
#	string destination; -----> 2bytes
#	int seqNumber; ----------> 2bytes
#	string applicationID; ---> 2bytes
# Application header overhead: Total bytes = 4*2 = 8 (|*|)

# Additionally, the connectivityMap_DataPacket (sub-class
# of App_GenericDataPacket) has some extra fields:
#    int data; -----------> 4bytes
# Data Payload = 4bytes

# Total bytes (|*|) 8 + 4 = 12 (constant application packet size)

SN.node[*].nodeApplication.maxAppPacketSize = 30    #in bytes
SN.node[*].nodeApplication.packetHeaderOverhead = 8 #in bytes
SN.node[*].nodeApplication.constantDataPayload = 4  # in bytes





# Define your Runs. You can have none (in that case Castalia will run once with
# the parameter values defined above) or you can have several Runs (in that
# case you can give different values to selected parameters in each Run).

[Run 1]
description = "Run 1"
# the seeds for each of the RNGs
seed-0-mt = 10
seed-1-mt = 111
seed-2-mt = 211
seed-3-mt = 40
seed-4-mt = 50
seed-5-mt = 60
seed-6-mt = 70
seed-7-mt = 80
seed-8-mt = 90
SN.node[*].networkInterface.Radio.txPowerLevelUsed = 0
SN.wirelessChannel.printDebugInfo = true
SN.node[*].networkInterface.Radio.printDebugInfo = true
